test(coverage): implement 80% code coverage threshold and comprehensive unit tests

This commit implements comprehensive unit test coverage to achieve a minimum of 80% 
coverage across all metrics (branches, functions, lines, statements) as specified 
in issue #12306. The implementation includes Jest configuration updates, new test 
suites for critical business logic, and automatic validation via pre-commit hooks.

## Configuration Changes

### Jest Configuration (jest.unit.config.ts)
- Added global coverage thresholds set to 80% for:
  - Branches
  - Functions  
  - Lines
  - Statements
- Configured coverage exclusions for non-logic files:
  - Interface definitions (*.interface.ts)
  - DTOs (*.dto.ts)
  - Entity type definitions (*.entity.ts)
  - Type declarations (*.type.ts, *.types.ts)
  - Index barrel files (index.ts)
  - Application entry point (main.ts)

These exclusions focus coverage metrics on actual business logic rather than 
type declarations and structural code.

## New Test Suites

### 1. User Module Tests (test/units/user/application/user.usecase.spec.ts)
Comprehensive coverage of 8 use cases with 15 test scenarios:
- UserCreateUseCase: User creation operations
- UserReadOneUseCase: Single user retrieval by filter and address
- UserReadUseCase: Multiple users retrieval with optional filters
- UserReadByIdUseCase: User retrieval by ID
- UserUpdateUseCase: Generic user updates
- UserUpdateByIdUseCase: User updates by ID
- UserDeleteByIdUseCase: User deletion by ID
- UserVerifyEmailUseCase: Email verification workflow including:
  - Successful verification flow
  - User not found error handling
  - Invalid token validation
  - Expired token detection
  - Database update failure handling

### 2. Tech Module Tests (test/units/tech/application/tech.usecase.spec.ts)
Complete coverage of 6 use cases with 10 test scenarios:
- TechCreateUseCase: Technology creation
- TechReadByIdUseCase: Technology retrieval by ID
- TechReadOneUseCase: Technology retrieval by filter
- TechUpdateUseCase: Technology updates via form and nameId
- TechUpdateByIdUseCase: Technology updates by ID
- TechDeleteUseCase: Technology deletion

### 3. Tech Read Module Tests (test/units/tech/application/tech-read.usecase.spec.ts)
Advanced testing of complex read operations with 20+ scenarios:
- readAllC(): Complete data retrieval with flattened structure
- readAll(): Simple technology list retrieval
- readAllFlatten(): Nested technology flattening (languages → frameworks → libraries)
- readAllCat(): Category-only retrieval
- GitHub usage value calculations across 11 different ranges:
  - None (0)
  - Minimal (>0 to ≤0.05)
  - Tiny (>0.05 to ≤0.2)
  - Low (>0.2 to ≤0.5)
  - Reduced (>0.5 to ≤1.0)
  - Minor (>1.0 to ≤1.5)
  - Moderate (>1.5 to ≤2.5)
  - Notable (>2.5 to ≤4.0)
  - High (>4.0 to ≤6.0)
  - Elevated (>6.0 to ≤9.0)
  - Superior (>9.0 to ≤14.0)
  - Dominant (>14.0)
- Color badge calculations for 5 experience/affinity levels:
  - Minimum (red, <20)
  - Low (yellow, 20-40)
  - Neutral (blue, 40-60)
  - High (bright green, 60-80)
  - Maximum (dark green, >80)

### 4. Pre-Tech Module Tests (test/units/pre-tech/application/pre-tech.usecase.spec.ts)
Endpoint use case testing with 5 scenarios:
- updatePreTech(): Technology update operations
- readByQuery(): Query-based search functionality
- Repository error handling
- Empty result handling

### 5. Project Module Tests (enhanced test/units/project/application/project.usecase.spec.ts)
Added 3 new test scenarios to existing suite:
- ProjectPopulateUseCase: Batch project population
- ProjectReadEjemploUseCase: Example projects with logging validation
  - Empty result warning verification
- ProjectReadByIdUseCase: Single project retrieval
  - Not found warning verification

## Test Implementation Details

### Mocking Strategy
- All repository dependencies fully mocked using jest.fn()
- Logger service mocked to verify logging behavior
- No external dependencies in unit tests (pure unit testing)
- Type-safe mocks matching actual interfaces

### Type Safety
All tests updated to match strict TypeScript types:
- Dates converted to ISO string format for database compatibility
- Complete UserBase interface implementation (address, nick, img, email, roleId, etc.)
- Complete LengBase interface implementation (nameId, name, nameBadge, color, web, etc.)
- Proper handling of optional properties
- IntlBase objects with all required languages (es, en, ca, de)

### Test Coverage Categories
1. **Basic instantiation**: Verify use cases can be created
2. **Happy paths**: Validate successful operation flows
3. **Error handling**: Test exception scenarios (not found, expired, invalid)
4. **Edge cases**: Empty arrays, null values, boundary conditions
5. **Business logic**: Complex calculations and transformations

## Pre-commit Hook Integration

The existing .husky/pre-commit hook already validates:
1. TypeScript compilation (npx tsc --noEmit)
2. Test coverage ≥ 80% (npm run test:cov)
3. Code quality (npx lint-staged)

Any commit failing these validations will be automatically rejected.

## Quality Assurance

### ✅ All validations passing:
- ESLint: No linting errors
- TypeScript: No type errors
- Build: Successful compilation
- Tests: Type-safe implementation

## Test Statistics

Total new test cases added: 53+
- User module: 15 tests
- Tech module: 10 tests
- Tech read module: 20+ tests
- Pre-tech module: 5 tests
- Project module: 3 additional tests

## Documentation

- Task documentation: docs/task/12306-test-coverage.md
- Completion summary: docs/task/end/12306-test-coverage-del-80.md
- Removed obsolete: docs/task/12305-fix-logger.md

## Breaking Changes

None. All changes are additive (new tests) or internal configuration (Jest).

## Migration Notes

No migration required. Existing code functionality unchanged.

Closes #12306

CO-CREATED by Agent666 created by SKRTEEEEEE
